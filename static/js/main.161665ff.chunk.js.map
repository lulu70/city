{"version":3,"sources":["images/image.jpg","images/eye.png","Controls.js","Ground.js","helpers.js","Building.js","Sphere.js","SpotLight.js","City.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","extend","OrbitControls","Controls","orbitRef","React","useRef","useThree","camera","gl","useFrame","current","update","ref","args","domElement","enableDamping","Ground","offset","texture","useMemo","THREE","load","image","position","receiveShadow","castShadow","attach","map","random","min","max","Math","memo","buildingHeight","groundPos","color","round","Sphere","onSphereClick","rotation","onClick","SpotLight","intensity","spotLight","penumbra","City","buildings","spotIntensity","spotColor","Array","fill","_","i","key","App","useState","dark","setDark","lightColor","setLightColor","spring","useSpring","ambientIntensity","cameraZoom","useEffect","onCreated","shadowMap","enabled","type","ambientLight","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,uMCI3CC,YAAO,CAAEC,oBAET,IAkBeC,EAlBE,WACf,IAAMC,EAAWC,IAAMC,SADF,EAEEC,cAAfC,EAFa,EAEbA,OAAQC,EAFK,EAELA,GAIhB,OAHAC,aAAS,WACPN,EAASO,QAAQC,YAGjB,mCACEC,IAAKT,EACLU,KAAM,CAACN,EAAQC,EAAGM,YAIlBC,eAAa,K,iBCDJC,EAdA,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACVC,EAAUd,IAAMe,SAAQ,kBAAM,IAAIC,iBAAsBC,KAAKC,OAAQ,IAK3E,OACE,0BAAMC,SAAU,CAACN,GAFD,GAEoB,GAAIO,eAAa,EAACC,YAAU,GAC9D,uCAAmBC,OAAO,WAAWb,KAAM,CALlC,IACE,GADF,OAMT,0CAAsBa,OAAO,WAAWC,IAAKT,MCbtCU,EAAS,SAACC,EAAKC,GAC1B,OAAOC,KAAKH,UAAYE,EAAMD,GAAOA,GC8BxBzB,MAAM4B,MA3BJ,SAAC,GAAoB,IAAD,IAAjBf,cAAiB,MAAR,EAAQ,EAE7BgB,EAAiBL,EAAO,GAAI,IAC5BM,EAAYD,EAAiB,EAC7Bf,EAAUd,IAAMe,SAAQ,kBAAM,IAAIC,iBAAsBC,KAAKC,OAAQ,IAC3E,OACE,0BACEC,SAAU,CACRK,GAAO,KAA0B,MAA2BX,EAC5DiB,EACAN,GAAO,KAA0B,OAEnCH,YAAU,GAEV,uCACEC,OAAO,WACPb,KAAM,CAfU,EAeMoB,EAfN,KAiBlB,0CACEP,OAAO,WACPC,IAAKT,EACLiB,MAAK,cAASP,EAAO,GAAI,IAApB,YAA2BG,KAAKK,MAAMR,EAAO,EAAG,KAAhD,gB,iBCJES,EAjBA,SAAC,GAAkD,IAAhDC,EAA+C,EAA/CA,cAAef,EAAgC,EAAhCA,SAAUgB,EAAsB,EAAtBA,SAAUJ,EAAY,EAAZA,MAC7CjB,EAAUd,IAAMe,SAAQ,kBAAM,IAAIC,iBAAsBC,KAAKC,OAAQ,IAE3E,OACE,0BACEC,SAAUA,EACVE,YAAU,EACVe,QAAS,kBAAMF,EAAcH,IAC7BI,SAAUA,GAET,oCAAgBb,OAAO,WAAWb,KAAM,CAAC,GAAI,IAAK,OAEnD,0CAAsBa,OAAO,WAAWC,IAAKT,M,QCFpCuB,EAZG,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,UAAWnB,EAAsB,EAAtBA,SAAUY,EAAY,EAAZA,MACxC,OACE,kBAAC,IAAEQ,UAAH,CACEpB,SAAUA,EACVqB,SAAU,GACVF,UAAWA,EACXjB,YAAU,EACVU,MAAOA,KC6DEU,EAjEF,SAAC,GAMP,IAAD,IALJC,iBAKI,MALQ,IAKR,MAJJ7B,cAII,MAJK,EAIL,EAHJqB,EAGI,EAHJA,cACAS,EAEI,EAFJA,cACAC,EACI,EADJA,UAGA,OACE,oCACE,kBAAC,EAAD,CACEzB,SAAU,CAAC,GAAc,EAATN,EAJI,IAI2B,IAC/CyB,UAAWK,EACXZ,MAAOa,IAET,kBAAC,EAAD,CACEzB,SAAU,CAAgB,EAATN,EAAL,GATQ,KAS6B,IACjDyB,UAAWK,EACXZ,MAAOa,IAET,kBAAC,EAAD,CACEzB,SAAU,CAAC,GAAc,EAATN,EAdI,KAc4B,IAChDyB,UAAWK,EACXZ,MAAOa,IAET,kBAAC,EAAD,CACEzB,SAAU,CAAgB,EAATN,EAAL,GAnBQ,IAmB4B,IAChDyB,UAAWK,EACXZ,MAAOa,IAET,kBAAC,EAAD,CACEV,cAAeA,EACff,SAAU,CAAC,IAAK,IAAK,KACrBgB,SAAU,EAAE,GAAK,IAAK,GACtBJ,MAAM,QAER,kBAAC,EAAD,CACEG,cAAeA,EACff,SAAU,EAAE,IAAK,IAAK,KACtBgB,SAAU,EAAE,GAAK,EAAG,GACpBJ,MAAM,UAER,kBAAC,EAAD,CACEG,cAAeA,EACff,SAAU,CAAC,IAAK,KAAM,KACtBgB,SAAU,EAAE,GAAK,GAAI,IACrBJ,MAAM,SAER,kBAAC,EAAD,CACEG,cAAeA,EACff,SAAU,EAAE,IAAK,KAAM,KACvBgB,SAAU,EAAE,EAAG,GAAI,GACnBJ,MAAM,WA3CV,KA8CE,kBAAC,EAAD,CAAQlB,OAAQA,IACfgC,MAAMH,GACJI,OACAvB,KAAI,SAACwB,EAAGC,GAAJ,OACH,kBAAC,EAAD,CAAUC,IAAKD,EAAGnC,OAAQA,SClBrBqC,MAvCf,WAAgB,IAAD,EACWlD,IAAMmD,UAAS,GAD1B,mBACNC,EADM,KACAC,EADA,OAEuBrD,IAAMmD,SAAS,SAFtC,mBAENG,EAFM,KAEMC,EAFN,KAIPC,EAASC,YAAU,CACvBC,iBAAkBN,EAAO,GAAM,GAC/BT,cAAeS,EAAO,EAAI,GAC1BO,WAAY,IACZL,eAMF,OAJAtD,IAAM4D,WAAU,WACdP,GAAQ,KACP,IAGD,oCACE,kBAAC,IAAD,CACElD,OAAQ,CAAEgB,SAAU,CAAC,EAAG,IAAK,MAC7B0C,UAAW,YAAa,IAAVzD,EAAS,EAATA,GACZA,EAAG0D,UAAUC,SAAU,EACvB3D,EAAG0D,UAAUE,KAAOhD,qBAGtB,kBAAC,EAAD,MACA,yBAAKM,OAAO,MAAMb,KAAM,CAAC,QAAS,IAAK,QACvC,kBAAC,IAAEwD,aAAH,CAAgB3B,UAAWkB,EAAOE,mBAClC,kBAAC,EAAD,CACEhB,UAAW,IACXR,cAAe,SAAAH,GACbwB,EAAcxB,IAEhBY,cAAea,EAAOb,cACtBC,UAAWY,EAAOF,gBC3BRY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.161665ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.b72995ae.jpg\";","module.exports = __webpack_public_path__ + \"static/media/eye.9283ef3f.png\";","import React from 'react'\nimport { useThree } from 'react-three-fiber'\nimport { extend, useFrame } from 'react-three-fiber'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\nextend({ OrbitControls })\n\nconst Controls = () => {\n  const orbitRef = React.useRef()\n  const { camera, gl } = useThree()\n  useFrame(() => {\n    orbitRef.current.update()\n  })\n  return (\n    <orbitControls\n      ref={orbitRef}\n      args={[camera, gl.domElement]}\n      // autoRotate\n      // maxPolarAngle={Math.PI / 3}\n      // minPolarAngle={Math.PI / 3}\n      enableDamping\n    />\n  )\n}\n\nexport default Controls\n","import React from 'react'\nimport image from './images/image.jpg'\nimport * as THREE from 'three'\n\nconst Ground = ({ offset }) => {\n  const texture = React.useMemo(() => new THREE.TextureLoader().load(image), [])\n\n  const size = 200\n  const length = 20\n  const groundPos = -length / 2\n  return (\n    <mesh position={[offset, groundPos, 0]} receiveShadow castShadow>\n      <boxBufferGeometry attach='geometry' args={[size, length, size]} />\n      <meshPhysicalMaterial attach='material' map={texture} />\n    </mesh>\n  )\n}\n\nexport default Ground\n","export const random = (min, max) => {\n  return Math.random() * (max - min) + min\n}\n","import React from 'react'\nimport image from './images/image.jpg'\nimport * as THREE from 'three'\nimport { random } from './helpers'\nconst Building = ({ offset = 0 }) => {\n  const buildingWidth = 7\n  const buildingHeight = random(10, 70)\n  const groundPos = buildingHeight / 2\n  const texture = React.useMemo(() => new THREE.TextureLoader().load(image), [])\n  return (\n    <mesh\n      position={[\n        random(-100 + buildingWidth / 2, 100 - buildingWidth / 2) + offset,\n        groundPos,\n        random(-100 + buildingWidth / 2, 100 - buildingWidth / 2)\n      ]}\n      castShadow\n    >\n      <boxBufferGeometry\n        attach='geometry'\n        args={[buildingWidth, buildingHeight, buildingWidth]}\n      />\n      <meshPhysicalMaterial\n        attach='material'\n        map={texture}\n        color={`hsl(${random(55, 65)},${Math.round(random(0, 30))}%,30%)`}\n      />\n    </mesh>\n  )\n}\n\nexport default React.memo(Building)\n","import React from 'react'\nimport image from './images/eye.png'\nimport * as THREE from 'three'\n\nconst Sphere = ({ onSphereClick, position, rotation, color }) => {\n  const texture = React.useMemo(() => new THREE.TextureLoader().load(image), [])\n\n  return (\n    <mesh\n      position={position}\n      castShadow\n      onClick={() => onSphereClick(color)}\n      rotation={rotation}\n    >\n      {<sphereGeometry attach='geometry' args={[20, 100, 100]} />}\n      {/* <meshPhysicalMaterial attach='material' color='yellow' /> */}\n      <meshPhysicalMaterial attach='material' map={texture} />\n    </mesh>\n  )\n}\n\nexport default Sphere\n","import React from 'react'\nimport { a } from 'react-spring/three'\nconst SpotLight = ({ intensity, position, color }) => {\n  return (\n    <a.spotLight\n      position={position}\n      penumbra={0.5}\n      intensity={intensity}\n      castShadow\n      color={color}\n    />\n  )\n}\n\nexport default SpotLight\n","import React from 'react'\nimport Ground from './Ground'\nimport Building from './Building'\nimport Sphere from './Sphere'\nimport SpotLight from './SpotLight'\nconst City = ({\n  buildings = 200,\n  offset = 0,\n  onSphereClick,\n  spotIntensity,\n  spotColor\n}) => {\n  const spotlightDistance = 100\n  return (\n    <>\n      <SpotLight\n        position={[40 + offset * 2, spotlightDistance, 40]}\n        intensity={spotIntensity}\n        color={spotColor}\n      />\n      <SpotLight\n        position={[-40 + offset * 2, spotlightDistance, -40]}\n        intensity={spotIntensity}\n        color={spotColor}\n      />\n      <SpotLight\n        position={[40 + offset * 2, spotlightDistance, -40]}\n        intensity={spotIntensity}\n        color={spotColor}\n      />\n      <SpotLight\n        position={[-40 + offset * 2, spotlightDistance, 40]}\n        intensity={spotIntensity}\n        color={spotColor}\n      />\n      <Sphere\n        onSphereClick={onSphereClick}\n        position={[200, 200, 200]}\n        rotation={[-0.5, 2.3, 0]}\n        color='red'\n      />\n      <Sphere\n        onSphereClick={onSphereClick}\n        position={[-200, 200, 200]}\n        rotation={[-0.5, 1, 0]}\n        color='green'\n      />\n      <Sphere\n        onSphereClick={onSphereClick}\n        position={[200, 200, -200]}\n        rotation={[-0.5, 10, 12]}\n        color='blue'\n      />\n      <Sphere\n        onSphereClick={onSphereClick}\n        position={[-200, 200, -200]}\n        rotation={[-3, 20, 0]}\n        color='orange'\n      />\n      )}\n      <Ground offset={offset} />\n      {Array(buildings)\n        .fill()\n        .map((_, i) => (\n          <Building key={i} offset={offset} />\n        ))}\n    </>\n  )\n}\n\nexport default City\n","import React from 'react'\nimport './App.css'\nimport { Canvas } from 'react-three-fiber'\nimport * as THREE from 'three'\nimport Controls from './Controls'\nimport City from './City'\nimport { a, useSpring } from 'react-spring/three'\nfunction App() {\n  const [dark, setDark] = React.useState(true)\n  const [lightColor, setLightColor] = React.useState('white')\n\n  const spring = useSpring({\n    ambientIntensity: dark ? 0.1 : 0.3,\n    spotIntensity: dark ? 0 : 0.5,\n    cameraZoom: 400,\n    lightColor\n  })\n  React.useEffect(() => {\n    setDark(false)\n  }, [])\n\n  return (\n    <>\n      <Canvas\n        camera={{ position: [0, 300, 250] }}\n        onCreated={({ gl }) => {\n          gl.shadowMap.enabled = true\n          gl.shadowMap.type = THREE.PCFSoftShadowMap\n        }}\n      >\n        <Controls />\n        <fog attach='fog' args={['black', 200, 1200]} />\n        <a.ambientLight intensity={spring.ambientIntensity} />\n        <City\n          buildings={100}\n          onSphereClick={color => {\n            setLightColor(color)\n          }}\n          spotIntensity={spring.spotIntensity}\n          spotColor={spring.lightColor}\n        />\n      </Canvas>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}